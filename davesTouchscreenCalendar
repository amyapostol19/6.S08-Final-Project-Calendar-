#include <Adafruit_GFX.h>
#include <SPI.h>
#include <Wire.h>      // this is needed even tho we aren't using it
#include <Adafruit_STMPE610.h>
#include <Adafruit_ILI9341.h>
#include "Adafruit_ILI9341.h" // Hardware-specific library
#include <SD.h>
#include <ESP8266.h>
#include <SparkFunLSM9DS1.h>
#include <Adafruit_SSD1306.h>

//all the colors (GFX library was giving me some trouble)
#define ILI9341_BLACK       0x0000      /*   0,   0,   0 */
#define ILI9341_NAVY        0x000F      /*   0,   0, 128 */
#define ILI9341_DARKGREEN   0x03E0      /*   0, 128,   0 */
#define ILI9341_DARKCYAN    0x03EF      /*   0, 128, 128 */
#define ILI9341_MAROON      0x7800      /* 128,   0,   0 */
#define ILI9341_PURPLE      0x780F      /* 128,   0, 128 */
#define ILI9341_OLIVE       0x7BE0      /* 128, 128,   0 */
#define ILI9341_LIGHTGREY   0xC618      /* 192, 192, 192 */
#define ILI9341_DARKGREY    0x7BEF      /* 128, 128, 128 */
#define ILI9341_BLUE        0x001F      /*   0,   0, 255 */
#define ILI9341_GREEN       0x07E0      /*   0, 255,   0 */
#define ILI9341_CYAN        0x07FF      /*   0, 255, 255 */
#define ILI9341_RED         0xF800      /* 255,   0,   0 */
#define ILI9341_MAGENTA     0xF81F      /* 255,   0, 255 */
#define ILI9341_YELLOW      0xFFE0      /* 255, 255,   0 */
#define ILI9341_WHITE       0xFFFF      /* 255, 255, 255 */
#define ILI9341_ORANGE      0xFD20      /* 255, 165,   0 */
#define ILI9341_GREENYELLOW 0xAFE5      /* 173, 255,  47 */
#define ILI9341_PINK        0xF81F

// This is calibration data for the raw touch data to the screen coordinates
#define TS_MINX 150
#define TS_MINY 130
#define TS_MAXX 3800
#define TS_MAXY 4000

// The STMPE610 uses hardware SPI on the shield, and #8
#define STMPE_CS 8
Adafruit_STMPE610 ts = Adafruit_STMPE610(STMPE_CS);

// TFT display and SD card will share the hardware SPI interface.
// Hardware SPI pins are specific to the Arduino board type and
// cannot be remapped to alternate pins.  For Arduino Uno,
// Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.

// The display also uses hardware SPI, plus #9 & #10
#define TFT_CS 10
#define TFT_DC 9
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);

#define SD_CS 4

// Size of the color selection boxes and the paintbrush size
#define BOXSIZE 40
#define PENRADIUS 3

int oldcolor, currentcolor;
String origin = "";
String event_name = "";
String event_location = "";
String event_time = "";

String char_string = "";
String old_string = "";

long first_time;
long end_time;

bool origin_touched = false;
bool name_touched = false;
bool location_touched = false;
bool time_touched = false;
bool add_event_mode = true;
bool display_mode = false;
bool displaymodeReady = false;

// Wifi options, constants, and variables
#define VERBOSE_WIFI true          // Verbose ESP8266 output
#define IOT true
#define IOT_UPDATE_INTERVAL 10000  // How often to send/pull from cloud (ms)
#define SSID "MIT"               // PUT SSID HERE
#define PASSWORD ""         // PUT PASSWORD HERE
const String KERBEROS = "davebam";  // PUT KERBEROS HERE
uint32_t tLastIotReq = 0;       // time of last send/pull
uint32_t tLastIotResp = 0;      // time of last response
String MAC = "";
String resp = "";

//Initialize library classes
ESP8266 wifi(VERBOSE_WIFI);
Adafruit_SSD1306 display(4);


void setup() {

  // while(!Serial); //used for debugging

  Serial.begin(9600);
  delay(500);
  Serial.println(F("Touchscreen!"));

  tft.begin();

  if (!ts.begin()){
    Serial.println("Couldn't start touchscreen controller");
    while (1);
  }
  Serial.println("Touchscreen started");
  delay(500);

  tft.fillScreen(ILI9341_BLUE);

  yield();

  Serial.print("Initializing SD card...");
  if (!SD.begin(SD_CS)){
    Serial.println("failed!");
  }
  Serial.println("OK!");

  if (add_event_mode){
  //draws keyboard picture
  bmpDraw("keyfour.bmp", 0, 0);
  tft.fillRect(0, 1, 28, 88, ILI9341_RED);
  tft.drawRect(0, 1, 28, 88, ILI9341_WHITE);
  Serial.println("Rectangle drawn");


  tft.setRotation(1);

  tft.fillRect(0, 80, 55, 20, ILI9341_BLACK);
  tft.drawRect(0, 80, 55, 20, ILI9341_WHITE);
  tft.fillRect(55, 80, 55, 20, ILI9341_BLACK);
  tft.drawRect(55, 80, 55, 20, ILI9341_WHITE);
  tft.fillRect(158, 80, 55, 20, ILI9341_BLACK);
  tft.drawRect(158, 80, 55, 20, ILI9341_WHITE);
  tft.fillRect(213, 80, 55, 20, ILI9341_BLACK);
  tft.drawRect(213, 80, 55, 20, ILI9341_WHITE);
  tft.fillRect(268, 80, 55, 20, ILI9341_BLACK);
  tft.drawRect(268, 80, 55, 20, ILI9341_WHITE);


  tft.setCursor(10, 222);
  tft.setTextSize(1);
  tft.setTextColor(ILI9341_WHITE);
  tft.println("Record Event");
  tft.setCursor(3, 82);
  tft.println("Display");
  tft.setCursor(3, 90);
  tft.println("Mode");
  tft.setCursor(65, 85);
  tft.println("Origin");
  tft.setCursor(170, 85);
  tft.println("Name");
  tft.setCursor(216, 85);
  tft.println("Location");
  tft.setCursor(280, 85);
  tft.println("Time");
  tft.setCursor(0,0);
  tft.setTextSize(1);
  tft.println("To begin logging an event, touch Name. \nTo set current location for directions, touch Origin.");
  tft.setCursor(297,190);
  tft.setTextSize(2);
  tft.println(":");
  tft.setCursor(0,0);
  }
  else{
    Serial.print("display mode");
  }

  // Wifi setup
  if (IOT) {
    
    wifi.begin();
    
    wifi.connectWifi(SSID, PASSWORD);
    while (!wifi.isConnected()){
      tft.setTextSize(1);
      tft.println("\n\n\nConnecting.");
      delay(500);
      while(!ts.bufferEmpty()){
        ts.getPoint();
       }
      displayClearer("\n\n\nConnecting.", 1);
      tft.println("\n\n\nConnecting..");
      delay(500);
      while(!ts.bufferEmpty()){
        ts.getPoint();
       }
      displayClearer("\n\n\nConnecting..", 1);
      tft.println("\n\n\nConnecting...");
      delay(500);
      while(!ts.bufferEmpty()){
        ts.getPoint();
       }
       displayClearer("\n\n\nConnecting...", 1); //wait for connection
    }
    
    MAC = wifi.getMAC();
    tft.println("\n\n\nConnected!!");
    delay(2000);
    while(!ts.bufferEmpty()){
      ts.getPoint();
     }
     
    displayClearer(" \n\n\nConnected!!", 1);
  }

}


void loop() {
  // See if there's any  touch data for us
  if (ts.bufferEmpty() || millis()-first_time < 500) {
    while(!ts.bufferEmpty()){
      ts.getPoint();
    }
    return;
  }
  /*
  // You can also wait for a touch
  if (! ts.touched()) {
    return;
  }
  */

  // Retrieve a point
  TS_Point p = ts.getPoint();
  first_time = millis();
  while(!ts.bufferEmpty()){
    ts.getPoint();
  }

  //prints location of the point to the serial monitor, not scaled
  /*
  Serial.print("X = "); Serial.print(p.x);
  Serial.print("\tY = "); Serial.print(p.y);
  Serial.print("\tPressure = "); Serial.println(p.z);  
 */

  // Scale from ~0->4000 to tft.width using the calibration #'s
  p.x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());
  p.y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());

  //prints location of the point touched to serial monitor (scaled)
  Serial.print("("); Serial.print(p.x);
  Serial.print(", "); Serial.print(p.y);
  Serial.println(")");
  Serial.println(first_time);

  //print letters to the Serial monitor and to the touchscreen
  //getletters(p.x, p.y);

   //puts screen in add event mode
  if (add_event_mode){

  //when user pushes the "Origin" button
  if (p.x > 190 && p.x < 230 && p.y > 40 && p.y < 80){
    displayClearer("To begin logging an event, touch Name. \nTo set current location for directions, touch Origin.", 1);
    tft.setTextSize(2);
    tft.println("Enter current location:");
    tft.fillRect(55, 80, 55, 20, ILI9341_DARKGREEN);
    tft.drawRect(55, 80, 55, 20, ILI9341_WHITE);
    tft.setTextSize(1);
    tft.setCursor(65, 85);
    tft.println("Origin");
    delay(150);
    while(!ts.bufferEmpty()){
      ts.getPoint();
     }
    tft.fillRect(55, 80, 55, 20, ILI9341_GREEN);
    tft.drawRect(55, 80, 55, 20, ILI9341_WHITE);
    tft.setTextSize(1);
    tft.setCursor(65, 85);
    tft.println("Origin");
    
    tft.setTextSize(1);
    tft.setCursor(10, 222);
    tft.setTextColor(ILI9341_RED);
    tft.println("Record Event");
    tft.setCursor(6, 222);
    tft.setTextColor(ILI9341_WHITE);
    tft.println("Submit Origin");
    
    tft.fillRect(0, 80, 55, 20, ILI9341_BLUE);
    tft.fillRect(158, 80, 55, 20, ILI9341_BLUE); 
    tft.fillRect(213, 80, 55, 20, ILI9341_BLUE);
    tft.fillRect(268, 80, 55, 20, ILI9341_BLUE);
   
    origin_touched = true;
    displaymodeReady = true;
    
  }

  if(origin_touched){
    getletters(p.x, p.y, 18);
    }
  }
  //user presses "Submit Origin" button
  if (p.x < 50 && p.y < 65 && origin_touched){
    tft.setRotation(0);
    tft.fillRect(0, 1, 28, 88, ILI9341_MAROON);
    tft.drawRect(0, 1, 28, 88, ILI9341_WHITE);
    tft.setRotation(1);
    tft.setTextSize(1);
    tft.setCursor(6, 222);
    tft.setTextColor(ILI9341_WHITE);
    tft.println("Submit Origin");
    delay(150);
    while(!ts.bufferEmpty()){
      ts.getPoint();
     }
    tft.setRotation(0);
    tft.fillRect(0, 1, 28, 88, ILI9341_RED);
    tft.drawRect(0, 1, 28, 88, ILI9341_WHITE);
    tft.setRotation(1);
    tft.setTextSize(1);
    tft.setCursor(6, 222);
    tft.setTextColor(ILI9341_WHITE);
    tft.println("Submit Origin");
    
    
    displayClearer("Enter current location:", 2);
    tft.setCursor(0,0);
    tft.setTextSize(2);
    tft.println("Your current location:");
    delay(3000);
    while(!ts.bufferEmpty()){
      ts.getPoint();
    } 
    tft.fillRect(268, 0, 55, 25, ILI9341_BLACK);
    tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
    tft.setCursor(275, 5);
    tft.setTextSize(1);
    tft.println("Close");
    
    origin += char_string;
    char_string = "";

    origin_touched = false;
    }

  
  //when the user pushes the "Name" button
  if (p.x > 190 && p.x < 230 && p.y > 110 && p.y < 150){
    displayClearer("To begin logging an event, touch Name. \nTo set current location for directions, touch Origin.", 1);
    //drawing button in 'selected' (green) mode
    tft.fillRect(158, 80, 55, 20, ILI9341_DARKGREEN);
    tft.drawRect(158, 80, 55, 20, ILI9341_WHITE);
    tft.setCursor(165, 85);
    tft.setTextSize(1);
    tft.println("Name");
    delay(150);
    while(!ts.bufferEmpty()){
      ts.getPoint();
     }
    tft.fillRect(158, 80, 55, 20, ILI9341_GREEN);
    tft.drawRect(158, 80, 55, 20, ILI9341_WHITE);
    tft.setCursor(165, 85);
    tft.setTextSize(1);
    tft.println("Name");
    //User query for event name
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    tft.setCursor(0,0);
    tft.println("Enter event name:");
    tft.setCursor(0,10);
    name_touched = true;
    
  }

  if (name_touched){
    if(time_touched){
      getletters(p.x, p.y, 34);
    }
    else{
      getletters(p.x, p.y, 18);
    }
    }

  //when user pushes the "Location" button
  if (name_touched) {
    if (p.x > 190 && p.x < 230 && p.y > 150 && p.y < 190){
        displayClearer("Enter event name:", 2);
        event_name += char_string; 
        old_string = char_string;
        char_string = "";
        //re-drawing buttons
        tft.fillRect(158, 80, 55, 20, ILI9341_BLACK);
        tft.drawRect(158, 80, 55, 20, ILI9341_WHITE);
        tft.setTextSize(1);
        tft.setCursor(165, 85);
        tft.println("Name");
        tft.fillRect(213, 80, 55, 20, ILI9341_DARKGREEN);
        tft.drawRect(213, 80, 55, 20, ILI9341_WHITE);
        tft.setCursor(218, 85);
        tft.println("Location");
        delay(150);
        while(!ts.bufferEmpty()){
        ts.getPoint();
        }
        tft.fillRect(213, 80, 55, 20, ILI9341_GREEN);
        tft.drawRect(213, 80, 55, 20, ILI9341_WHITE);
        tft.setCursor(218, 85);
        tft.println("Location");
  
        //displaying name confirmation, 3sec delay
        tft.setCursor(0,0);
        tft.setTextSize(2);
        tft.println("Your event name is: ");
        delay(3000);
        while(!ts.bufferEmpty()){
            ts.getPoint();
        }
        
        //clearing name confirmation
        tft.setTextColor(ILI9341_BLUE);
        tft.setTextSize(2);
        tft.setCursor(0,0);
        tft.println("Your event name is: ");
        dispCurrentLetters(18);
        
        //displaying new query for event location
        tft.setTextColor(ILI9341_WHITE);
        tft.setTextSize(2);
        tft.setCursor(0,0);
        tft.println("Enter a location:");
    
        location_touched = true;
    }
  }
  
  

  //when user pushes the "Time" Button
  if (name_touched && location_touched){
    if (p.x > 190 && p.x < 230 && p.y > 190 && p.y < 245){
      //clearing previous query for location
      displayClearer("Enter a location:", 2);
      event_location += char_string;
      old_string = char_string;
      char_string = "";
      
      //re-drawing buttons
      tft.fillRect(213, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(213, 80, 55, 20, ILI9341_WHITE);
      tft.setTextSize(1);
      tft.setCursor(218, 85);
      tft.println("Location");
      tft.fillRect(268, 80, 55, 20, ILI9341_DARKGREEN);
      tft.drawRect(268, 80, 55, 20, ILI9341_WHITE);
      tft.setCursor(275, 85);
      tft.println("Time");
      delay(150);
      while(!ts.bufferEmpty()){
        ts.getPoint();
       }
      tft.fillRect(268, 80, 55, 20, ILI9341_GREEN);
      tft.drawRect(268, 80, 55, 20, ILI9341_WHITE);
      tft.setCursor(275, 85);
      tft.println("Time");
  
      //displaying location confirmation, 3sec delay
      tft.setCursor(0,0);
      tft.setTextSize(2);
      tft.println("Your event location is: ");
      delay(3000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      //clearing location confirmation
      tft.setTextColor(ILI9341_BLUE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Your event location is: ");
      dispCurrentLetters(18);
      
      //displaying new query for event time
      tft.setTextColor(ILI9341_WHITE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Enter a date & time.\n(YYYY-MM-DD hh:mm:ss)");
      
      time_touched = true;
      
    }
  }
  
  
  //when user pushes the "Record Event" button
  if (name_touched && location_touched && time_touched){
    if (p.x < 50 && p.y < 65){
      tft.setRotation(0);
      tft.fillRect(0, 1, 28, 88, ILI9341_MAROON);
      tft.drawRect(0, 1, 28, 88, ILI9341_WHITE);
      tft.setRotation(1);
      tft.setTextSize(1);
      tft.setCursor(10, 222);
      tft.setTextColor(ILI9341_WHITE);
      tft.println("Record Event");
      delay(150);
      while(!ts.bufferEmpty()){
      ts.getPoint();
      }
      tft.setRotation(0);
      tft.fillRect(0, 1, 28, 88, ILI9341_RED);
      tft.drawRect(0, 1, 28, 88, ILI9341_WHITE);
      tft.setRotation(1);
      tft.setTextSize(1);
      tft.setCursor(10, 222);
      tft.setTextColor(ILI9341_WHITE);
      tft.println("Record Event");
      
      displayClearer("Enter a date & time.\n(YYYY-MM-DD hh:mm:ss)", 2);
      event_time +=char_string;
      old_string = char_string;
      char_string = "";
      //re-drawing buttons
      tft.fillRect(268, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(268, 80, 55, 20, ILI9341_WHITE);
      tft.setCursor(275, 85);
      tft.setTextSize(1);
      tft.println("Time");
      Serial.println(old_string);

      tft.setCursor(0,0);
      tft.setTextSize(2);
      tft.println("Your event time is: ");
      delay(3000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      tft.setTextColor(ILI9341_BLUE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Your event time is: ");
      dispCurrentLetters(34);

      tft.setCursor(0,0);
      tft.setTextSize(1);
      tft.println("Event Information");
      tft.print("Event Name: ");
      tft.println(event_name);
      tft.print("Location: ");
      tft.println(event_location);
      tft.print("Time: ");
      tft.println(event_time);
      delay(5000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      tft.fillRect(268, 0, 55, 25, ILI9341_BLACK);
      tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
      tft.setCursor(275, 5);
      tft.setTextSize(1);
      tft.println("Close");

      name_touched = false;
      location_touched = false;
      time_touched = false;
            
      
      //post to database
     if (IOT && (millis() - tLastIotReq >= IOT_UPDATE_INTERVAL)) {
      if (wifi.isConnected() && !wifi.isBusy()) { //Check if we can send request
      Serial.println("Starting POST request");
      Serial.print("Sending request at t=");
      Serial.println(millis());
      
      String domain = "iesc-s2.mit.edu";
      int port = 80;
      String path = "/student_code/" + KERBEROS + "/dev1/sb2.py";
      String getParams = "event_name="+event_name+"&time="+event_time+"&location="+event_location;
      
      wifi.sendRequest(POST, domain, port, path, getParams, true);
      tLastIotReq = millis();
      Serial.println(getParams);

      unsigned long t = millis();
      while(!wifi.hasResponse() && millis()-t<10000); //wait for response
      String resp = "";
      if (wifi.hasResponse()){
        resp=wifi.getResponse();
        Serial.print("Got response at t=");
        Serial.println(millis());
        Serial.println(resp);

        int html1 = resp.indexOf("<html>")+6;
        int html2 = resp.indexOf("</html>");
        String resp2 = resp.substring(html1, html2);
        Serial.println(resp2);

      }
      else{
        Serial.println("No timely response");
        resp = "Nothing";
      }
      }
    }
    char_string = "";
    event_name = "";
    event_location = "";
    event_time = "";  
    }
  }
    

  


  //user pushes the display mode button
  if(displaymodeReady){
    if (p.x > 190 && p.x < 230 && p.y > 0 && p.y < 40){
      tft.fillRect(0, 80, 55, 20, ILI9341_DARKGREEN);
      tft.drawRect(0, 80, 55, 20, ILI9341_WHITE);
      tft.setTextSize(1);
      tft.setCursor(3, 82);
      tft.println("Display");
      tft.setCursor(3, 90);
      tft.println("Mode");
      delay(150);
      while(!ts.bufferEmpty()){
        ts.getPoint();
       }
       tft.fillRect(0, 80, 55, 20, ILI9341_BLACK);
       tft.drawRect(0, 80, 55, 20, ILI9341_WHITE);
       tft.setTextSize(1);
       tft.setCursor(3, 82);
       tft.println("Display");
       tft.setCursor(3, 90);
       tft.println("Mode");
       delay(100);
       while(!ts.bufferEmpty()){        
        ts.getPoint();
       }
      tft.fillScreen(ILI9341_BLUE); 
      tft.fillRect(268, 0, 55, 25, ILI9341_BLACK);
      tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
      tft.setCursor(275, 5);
      tft.setTextSize(1);
      tft.println("Close");
      
      add_event_mode = false;
      display_mode = true;
    }
  }
    //the user goes back to add event mode
    if (p.x > 290 && p.y > 190 && p.y < 245){
      add_event_mode = true;
      display_mode = false;
      tft.fillRect(268, 0, 55, 25, ILI9341_DARKGREEN);
      tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
      tft.setCursor(275, 5);
      tft.setTextSize(1);
      tft.println("Close");
      delay(150);
      while(!ts.bufferEmpty()){
      ts.getPoint();
      }
      tft.fillRect(268, 0, 55, 25, ILI9341_BLACK);
      tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
      tft.setCursor(275, 5);
      tft.setTextSize(1);
      tft.println("Close");
      delay(100);
      while(!ts.bufferEmpty()){
      ts.getPoint();
      }
      tft.fillScreen(ILI9341_BLUE);
      Serial.println("Did it work?");
      tft.setRotation(0);
      bmpDraw("keyfour.bmp", 0, 0);
      tft.fillRect(0, 0, 28, 90, ILI9341_RED);
      tft.drawRect(0, 0, 28, 90, ILI9341_WHITE);

      tft.setRotation(1);

      tft.fillRect(0, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(0, 80, 55, 20, ILI9341_WHITE);
      tft.fillRect(55, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(55, 80, 55, 20, ILI9341_WHITE);
      tft.fillRect(158, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(158, 80, 55, 20, ILI9341_WHITE);
      tft.fillRect(213, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(213, 80, 55, 20, ILI9341_WHITE);
      tft.fillRect(268, 80, 55, 20, ILI9341_BLACK);
      tft.drawRect(268, 80, 55, 20, ILI9341_WHITE);
    
    
      tft.setCursor(10, 222);
      tft.setTextSize(1);
      tft.setTextColor(ILI9341_WHITE);
      tft.println("Record Event");
      tft.setCursor(3, 82);
      tft.println("Display");
      tft.setCursor(3, 90);
      tft.println("Mode");
      tft.setCursor(65, 85);
      tft.println("Origin");
      tft.setCursor(170, 85);
      tft.println("Name");
      tft.setCursor(216, 85);
      tft.println("Location");
      tft.setCursor(280, 85);
      tft.println("Time");
      tft.setCursor(0,0);
      tft.setTextSize(1);
      tft.println("To begin logging an event, touch Name. \nTo set current location for directions, touch Origin.");
      tft.setCursor(297,190);
      tft.setTextSize(2);
      tft.println(":");
      tft.setCursor(0,0);
    }
  


  if (display_mode && !add_event_mode){
  if (IOT && wifi.hasResponse()){
    resp = wifi.getResponse();
    tLastIotResp = millis();
    Serial.print("working");
  }

    if (IOT && (millis() - tLastIotReq >= IOT_UPDATE_INTERVAL)){
    if (wifi.isConnected() && !wifi.isBusy()) { //Check if we can send request
      Serial.print("Sending request at t=");
      Serial.println(millis());
      
      String domain = "iesc-s2.mit.edu";
      int port = 80;
      String path = "/student_code/" + KERBEROS + "/dev1/sb2.py";
      String getParams = "origin="+origin;
      
      wifi.sendRequest(GET, domain, port, path, getParams, true);
      tLastIotReq = millis();

      unsigned long t = millis();
      while(!wifi.hasResponse() && millis()-t<10000); //wait for response
      String resp = "";
      if (wifi.hasResponse()){
        resp=wifi.getResponse();
        Serial.print("Got response at t=");
        Serial.println(millis());
        Serial.println(resp);
        
        int html1 = resp.indexOf("<html>")+6;
        int html2 = resp.indexOf("</html>");
        String resp2 = resp.substring(html1, html2);

        //indices for highlighting substrings of key info
        int timeIndex1 = resp2.indexOf("take you about")+14;
        int timeIndex2 = resp2.indexOf("to arrive to")-1;
        int nameIndex1 = timeIndex2+13;
        int nameIndex2 = resp2.indexOf(" at ");
        int locIndex1 = nameIndex2+4;
        int locIndex2 = resp2.indexOf(". You");
        int dirIndex1 = resp2.indexOf("Directions:");
        int dirIndex2 = dirIndex1+11;
        
        String time_till = resp2.substring(timeIndex1, timeIndex2);
        if (time_till.endsWith("minutes")){
          tft.setCursor(0,20);
          tft.setTextSize(1);
          tft.print(resp2.substring(0, timeIndex1));
          tft.setTextColor(ILI9341_GREEN);
          tft.print(time_till);
          tft.setTextColor(ILI9341_WHITE);        
          tft.println(resp2.substring(timeIndex2, nameIndex1));
          tft.setTextColor(ILI9341_GREEN);
          tft.print(resp2.substring(nameIndex1+1, nameIndex2));
          tft.setTextColor(ILI9341_WHITE);        
          tft.print(resp2.substring(nameIndex2, locIndex1));
          tft.setTextColor(ILI9341_GREEN);
          tft.print(resp2.substring(locIndex1, locIndex2));
          tft.setTextColor(ILI9341_WHITE);        
          tft.println(resp2.substring(locIndex2, locIndex2+1));
          tft.println(resp2.substring(locIndex2+2, dirIndex1));
          tft.setTextColor(ILI9341_GREEN);        
          tft.println(resp2.substring(dirIndex1, dirIndex2));
          tft.println("-----------------------------------------------------");
          tft.setTextColor(ILI9341_WHITE);
          tft.print(resp2.substring(dirIndex2, -1));
        }
        else{
          tft.setCursor(0,20);
          tft.setTextSize(1);
          tft.print(resp2);
        }
        
      }
      else{
        Serial.println("No timely response");
        resp = "Nothing";
      }
      }
    }
  }

}


void getletters(int x, int y, int yCursor){
  //print letters to the Serial monitor
  if (x > 155 && x < 190 && y < 23){
    char_string += "1";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 23 && y < 40){
    char_string += "2";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 40 && y < 57){
    char_string += "3";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 57 && y < 77){
    char_string += "4";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 77 && y < 97){
    char_string += "5";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 97 && y < 123){
    char_string += "6";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 123 && y < 145){
    char_string += "7";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 145 && y < 165){
    char_string += "8";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 165 && y < 187){
    char_string += "9";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 155 && x < 190 && y >= 187 && y < 205){
    char_string += "0";
    dispCurrentLetters(yCursor); 
  }
  else if (x < 50 && y >= 65 && y < 160){
    char_string += " ";
    dispCurrentLetters(yCursor); 
  }
  else if (x < 50 && y >= 160){
    if (char_string != ""){
    char_string = char_string.substring(0, char_string.length()-1);
    }
    dispCurrentLetters(yCursor); 
  }
  else if (x > 50 && x < 85 && y >= 123 && y < 145){
    char_string += "/";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 50 && x < 85 && y >= 187 && y < 205){
    char_string += "-";
    dispCurrentLetters(yCursor); 
  }
  else if (x > 50 && x < 85 && y >= 205){
    char_string += ":";
    dispCurrentLetters(yCursor); 
  }

  else if (char_string == "" || char_string.endsWith(" ")){
    if (x > 125 && x < 155 && y < 23){
      char_string += "A";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 23 && y < 40){
      char_string += "B";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 40 && y < 57){
      char_string += "C";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 57 && y < 77){
      char_string += "D";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 77 && y < 97){
      char_string += "E";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 97 && y < 123){
      char_string += "F";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 123 && y < 145){
      char_string += "G";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 145 && y < 165){
      char_string += "H";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 165 && y < 187){
      char_string += "I";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 187 && y < 205){
      char_string += "J";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 205){
      char_string += "K";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y < 23){
      char_string += "L";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 23 && y < 40){
      char_string += "M";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 40 && y < 57){
      char_string += "N";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 57 && y < 77){
      char_string += "O";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 77 && y < 97){
      char_string += "P";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 97 && y < 123){
      char_string += "Q";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 123 && y < 145){
      char_string += "R";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 145 && y < 165){
      char_string += "S";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 165 && y < 187){
      char_string += "T";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 187 && y < 205){
      char_string += "U";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 205){
      char_string += "V";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y < 23){
      char_string += "W";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 23 && y < 40){
      char_string += "X";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 40 && y < 57){
      char_string += "Y";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 57 && y < 77){
      char_string += "Z";
      dispCurrentLetters(yCursor); 
    }
    
  }
  else{
    if (x > 125 && x < 155 && y < 23){
      char_string += "a";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 23 && y < 40){
      char_string += "b";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 40 && y < 57){
      char_string += "c";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 57 && y < 77){
      char_string += "d";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 77 && y < 97){
      char_string += "e";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 97 && y < 123){
      char_string += "f";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 123 && y < 145){
      char_string += "g";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 145 && y < 165){
      char_string += "h";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 165 && y < 187){
      char_string += "i";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 187 && y < 205){
      char_string += "j";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 125 && x < 155 && y >= 205){
      char_string += "k";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y < 23){
      char_string += "l";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 23 && y < 40){
      char_string += "m";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 40 && y < 57){
      char_string += "n";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 57 && y < 77){
      char_string += "o";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 77 && y < 97){
      char_string += "p";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 97 && y < 123){
      char_string += "q";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 123 && y < 145){
      char_string += "r";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 145 && y < 165){
      char_string += "s";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 165 && y < 187){
      char_string += "t";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 187 && y < 205){
      char_string += "u";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 85 && x < 125 && y >= 205){
      char_string += "v";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y < 23){
      char_string += "w";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 23 && y < 40){
      char_string += "x";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 40 && y < 57){
      char_string += "y";
      dispCurrentLetters(yCursor); 
    }
    else if (x > 50 && x < 85 && y >= 57 && y < 77){
      char_string += "z";
      dispCurrentLetters(yCursor); 
    }
  }
  
}



void dispCurrentLetters(int yCursor){
    tft.setTextColor(ILI9341_BLUE);
    tft.setTextSize(2);
    tft.setCursor(0,yCursor);
    tft.println(old_string);
    Serial.println(char_string);
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    tft.setCursor(0, yCursor);
    tft.println(char_string);
    old_string = char_string; 
}

void displayClearer(String old_text, int fontsize){
  tft.setTextColor(ILI9341_BLUE);
  tft.setTextSize(fontsize);
  tft.setCursor(0,0);
  tft.println(old_text);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(fontsize);
  tft.setCursor(0,0);
}
  

// This function opens a Windows Bitmap (BMP) file and
// displays it at the given coordinates.  It's sped up
// by reading many pixels worth of data at a time
// (rather than pixel by pixel).  Increasing the buffer
// size takes more of the Arduino's precious RAM but
// makes loading a little faster.  20 pixels seems a
// good balance.

#define BUFFPIXEL 20

void bmpDraw(char *filename, uint8_t x, uint16_t y){

  File     bmpFile;
  int      bmpWidth, bmpHeight;   // W+H in pixels
  uint8_t  bmpDepth;              // Bit depth (currently must be 24)
  uint32_t bmpImageoffset;        // Start of image data in file
  uint32_t rowSize;               // Not always = bmpWidth; may have padding
  uint8_t  sdbuffer[3*BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
  uint8_t  buffidx = sizeof(sdbuffer); // Current position in sdbuffer
  boolean  goodBmp = false;       // Set to true on valid header parse
  boolean  flip    = true;        // BMP is stored bottom-to-top
  int      w, h, row, col;
  uint8_t  r, g, b;
  uint32_t pos = 0, startTime = millis();

  if((x >= tft.width()) || (y >= tft.height())) return;

  Serial.println();
  Serial.print(F("Loading image '"));
  Serial.print(filename);
  Serial.println('\'');

  // Open requested file on SD card
  if ((bmpFile = SD.open(filename)) == NULL) {
    Serial.print(F("File not found"));
    return;
  }

    // Parse BMP header
  if(read16(bmpFile) == 0x4D42) { // BMP signature
    Serial.print(F("File size: ")); Serial.println(read32(bmpFile));
    (void)read32(bmpFile); // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile); // Start of image data
    Serial.print(F("Image Offset: ")); Serial.println(bmpImageoffset, DEC);
    // Read DIB header
    Serial.print(F("Header size: ")); Serial.println(read32(bmpFile));
    bmpWidth  = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    if(read16(bmpFile) == 1) { // # planes -- must be '1'
      bmpDepth = read16(bmpFile); // bits per pixel
      Serial.print(F("Bit Depth: ")); Serial.println(bmpDepth);
      if((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed

        goodBmp = true; // Supported BMP format -- proceed!
        Serial.print(F("Image size: "));
        Serial.print(bmpWidth);
        Serial.print('x');
        Serial.println(bmpHeight);

        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * 3 + 3) & ~3;

        // If bmpHeight is negative, image is in top-down order.
        // This is not canon but has been observed in the wild.
        if(bmpHeight < 0) {
          bmpHeight = -bmpHeight;
          flip      = false;
        }

        // Crop area to be loaded
        w = bmpWidth;
        h = bmpHeight;
        if((x+w-1) >= tft.width())  w = tft.width()  - x;
        if((y+h-1) >= tft.height()) h = tft.height() - y;

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x+w-1, y+h-1);

        for (row=0; row<h; row++) { // For each scanline...

          // Seek to start of scan line.  It might seem labor-
          // intensive to be doing this on every line, but this
          // method covers a lot of gritty details like cropping
          // and scanline padding.  Also, the seek only takes
          // place if the file position actually needs to change
          // (avoids a lot of cluster math in SD library).
          if(flip) // Bitmap is stored bottom-to-top order (normal BMP)
            pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
          else     // Bitmap is stored top-to-bottom
            pos = bmpImageoffset + row * rowSize;
          if(bmpFile.position() != pos) { // Need seek?
            bmpFile.seek(pos);
            buffidx = sizeof(sdbuffer); // Force buffer reload
          }

          for (col=0; col<w; col++) { // For each pixel...
            // Time to read more pixel data?
            if (buffidx >= sizeof(sdbuffer)) { // Indeed
              bmpFile.read(sdbuffer, sizeof(sdbuffer));
              buffidx = 0; // Set index to beginning
            }

            // Convert pixel from BMP to TFT format, push to display
            b = sdbuffer[buffidx++];
            g = sdbuffer[buffidx++];
            r = sdbuffer[buffidx++];
            tft.pushColor(tft.color565(r,g,b));
          } // end pixel
        } // end scanline
        Serial.print(F("Loaded in "));
        Serial.print(millis() - startTime);
        Serial.println(" ms");
      } // end goodBmp
    }
  }

  bmpFile.close();
  if(!goodBmp) Serial.println(F("BMP format not recognized."));
}

// These read 16- and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
  uint16_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read(); // MSB
  return result;
}

uint32_t read32(File &f) {
  uint32_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read();
  ((uint8_t *)&result)[2] = f.read();
  ((uint8_t *)&result)[3] = f.read(); // MSB
  return result;
}
