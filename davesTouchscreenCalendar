#include <Adafruit_GFX.h>    // Core graphics library
#include <SPI.h>
#include <Wire.h>      // this is needed even tho we aren't using it
#include <Adafruit_ILI9341.h>
#include <Adafruit_STMPE610.h>
#include "Adafruit_ILI9341.h" // Hardware-specific library
#include <SD.h>
#include <ESP8266.h>
#include <SparkFunLSM9DS1.h>
#include <Adafruit_SSD1306.h>

// This is calibration data for the raw touch data to the screen coordinates
#define TS_MINX 150
#define TS_MINY 130
#define TS_MAXX 3800
#define TS_MAXY 4000

// The STMPE610 uses hardware SPI on the shield, and #8
#define STMPE_CS 8
Adafruit_STMPE610 ts = Adafruit_STMPE610(STMPE_CS);

// TFT display and SD card will share the hardware SPI interface.
// Hardware SPI pins are specific to the Arduino board type and
// cannot be remapped to alternate pins.  For Arduino Uno,
// Duemilanove, etc., pin 11 = MOSI, pin 12 = MISO, pin 13 = SCK.

// The display also uses hardware SPI, plus #9 & #10
#define TFT_CS 10
#define TFT_DC 9
Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);

#define SD_CS 4

// Size of the color selection boxes and the paintbrush size
#define BOXSIZE 40
#define PENRADIUS 3
int oldcolor, currentcolor;
String event_name = "";
String event_location = "";
String event_time = "";
String event_info = "";
String old_event = "";
long first_time;
long end_time;
bool name_touched = false;
bool location_touched = false;
bool time_touched = false;
bool add_event_mode = true;
bool display_mode = false;

// Wifi options, constants, and variables
#define VERBOSE_WIFI true          // Verbose ESP8266 output
#define IOT true
#define IOT_UPDATE_INTERVAL 10000  // How often to send/pull from cloud (ms)
#define SSID "MIT"               // PUT SSID HERE
#define PASSWORD ""         // PUT PASSWORD HERE
const String KERBEROS = "davebam";  // PUT KERBEROS HERE
uint32_t tLastIotReq = 0;       // time of last send/pull
uint32_t tLastIotResp = 0;      // time of last response
String MAC = "";
String resp = "";

//Initialize library classes
ESP8266 wifi(VERBOSE_WIFI);
Adafruit_SSD1306 display(4);


void setup() {
  // while(!Serial); //used for debugging

  Serial.begin(9600);
  delay(500);
  Serial.println(F("Touchscreen!"));

  tft.begin();

  if (!ts.begin()){
    Serial.println("Couldn't start touchscreen controller");
    while (1);
  }
  Serial.println("Touchscreen started");
  delay(500);

  tft.fillScreen(ILI9341_BLUE);

  yield();

  Serial.print("Initializing SD card...");
  if (!SD.begin(SD_CS)){
    Serial.println("failed!");
  }
  Serial.println("OK!");

  if (add_event_mode){
  //draws keyboard picture
  bmpDraw("keyfour.bmp", 0, 0);
  tft.fillRect(0, 0, 28, 90, ILI9341_RED);
  Serial.println("Rectangle drawn");


  tft.setRotation(1);

  tft.fillRect(103, 75, 55, 25, ILI9341_BLACK);
  tft.drawRect(103, 75, 55, 25, ILI9341_WHITE);
  tft.fillRect(268, 75, 55, 25, ILI9341_BLACK);
  tft.drawRect(268, 75, 55, 25, ILI9341_WHITE);
  tft.fillRect(213, 75, 55, 25, ILI9341_BLACK);
  tft.drawRect(213, 75, 55, 25, ILI9341_WHITE);
  tft.fillRect(158, 75, 55, 25, ILI9341_BLACK);
  tft.drawRect(158, 75, 55, 25, ILI9341_WHITE);
  
  tft.setCursor(10, 222);
  tft.setTextSize(1);
  tft.setTextColor(ILI9341_WHITE);
  tft.println("Record Event");
  tft.setCursor(105, 78);
  tft.println("Display");
  tft.setCursor(105, 88);
  tft.println("Mode");
  tft.setCursor(165, 85);
  tft.println("Name");
  tft.setCursor(218, 85);
  tft.println("Location");
  tft.setCursor(275, 85);
  tft.println("Time");
  tft.setCursor(0,0);
  tft.setTextSize(2);
  tft.println("Enter Name, Location and Time of Event. Touch 'Name' to start.");
  }
  else{
    Serial.print("display mode");
  }

  // Wifi setup
  if (IOT) {
    wifi.begin();
    Serial.println("Connecting to:");
    Serial.println(SSID);
    wifi.connectWifi(SSID, PASSWORD);
    while (!wifi.isConnected()); //wait for connection
    MAC = wifi.getMAC();
    Serial.println("Connected!!");
  }

}






void loop() {
  // See if there's any  touch data for us
  if (ts.bufferEmpty() || millis()-first_time < 500) {
    while(!ts.bufferEmpty()){
      ts.getPoint();
    }
    return;
  }
  /*
  // You can also wait for a touch
  if (! ts.touched()) {
    return;
  }
  */

  // Retrieve a point
  TS_Point p = ts.getPoint();
  first_time = millis();
  while(!ts.bufferEmpty()){
    ts.getPoint();
  }

  //prints location of the point to the serial monitor, not scaled
  /*
  Serial.print("X = "); Serial.print(p.x);
  Serial.print("\tY = "); Serial.print(p.y);
  Serial.print("\tPressure = "); Serial.println(p.z);  
 */

  // Scale from ~0->4000 to tft.width using the calibration #'s
  p.x = map(p.x, TS_MINX, TS_MAXX, 0, tft.width());
  p.y = map(p.y, TS_MINY, TS_MAXY, 0, tft.height());

  //prints location of the point touched to serial monitor (scaled)
  Serial.print("("); Serial.print(p.x);
  Serial.print(", "); Serial.print(p.y);
  Serial.println(")");
  Serial.println(first_time);

  //print letters to the Serial monitor and to the touchscreen
  //getletters(p.x, p.y);

   //puts screen in add event mode
  if (add_event_mode){

  //when the user pushes the "Name" button
  if (p.x > 190 && p.x < 230 && p.y > 110 && p.y < 150){
    displayClearer("Enter Name, Location and Time of Event. Touch 'Name' to start.");
    tft.fillRect(158, 75, 55, 25, ILI9341_GREEN);
    tft.setTextSize(1);
    tft.setCursor(165, 85);
    tft.println("Name");
    name_touched = true;
  }

  if (name_touched){
    getletters(p.x, p.y);
  }

  //when user pushes the "Location" button
  if (name_touched){
    if (p.x > 190 && p.x < 230 && p.y > 150 && p.y < 190){
        tft.fillRect(158, 75, 55, 25, ILI9341_BLACK);
        tft.drawRect(158, 75, 55, 25, ILI9341_WHITE);
        tft.setTextSize(1);
        tft.setCursor(165, 85);
        tft.println("Name");
        tft.fillRect(213, 75, 55, 25, ILI9341_GREEN);
        tft.setCursor(218, 85);
        tft.println("Location");
        Serial.println(old_event);
        displayClearer(old_event);
        tft.println("Your event name is: ");
        tft.println(event_info);
        delay(3000);
        while(!ts.bufferEmpty()){
            ts.getPoint();
          }
        tft.setTextColor(ILI9341_BLUE);
        tft.setTextSize(2);
        tft.setCursor(0,0);
        tft.println("Your event name is: ");
        tft.println(event_info);
        tft.setTextColor(ILI9341_WHITE);
        tft.setTextSize(2);
        tft.setCursor(0,0);
        tft.println("Name recorded. Location?");
        delay(3000);
        displayClearer("Name recorded. Location?");
        old_event = event_info;
        event_name += event_info;
        event_info = "";
        Serial.println(event_name);
        location_touched = true;
      }
    }

  //when user pushes the "Time" Button
  if (name_touched && location_touched){
    if (p.x > 190 && p.x < 230 && p.y > 190 && p.y < 245){
      tft.fillRect(213, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(213, 75, 55, 25, ILI9341_WHITE);
      tft.setTextSize(1);
      tft.setCursor(218, 85);
      tft.println("Location");
      tft.fillRect(268, 75, 55, 25, ILI9341_GREEN);
      tft.setCursor(275, 85);
      tft.println("Time");
      Serial.println(old_event);
      displayClearer(old_event);
      tft.println("Your event location is: ");
      tft.println(event_info);
      delay(3000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      tft.setTextColor(ILI9341_BLUE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Your event location is: ");
      tft.println(event_info);
      tft.setTextColor(ILI9341_WHITE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Location recorded. Date and Time?");
      delay(3000);
      displayClearer("Location recorded. Date and Time?");
      old_event = event_info;
      event_location += event_info;
      event_info = "";
      Serial.println(event_location);
      time_touched = true;
    }
  }
  
  
  //when user pushes the "Record Event" button
  if (name_touched && location_touched && time_touched){
    if (p.x < 50 && p.y < 65){
      tft.fillRect(268, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(268, 75, 55, 25, ILI9341_WHITE);
      tft.setCursor(275, 85);
      tft.setTextSize(1);
      tft.println("Time");
      Serial.println(old_event);
      displayClearer(old_event);
      tft.println("Your event time is: ");
      tft.println(event_info);
      delay(3000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      tft.setTextColor(ILI9341_BLUE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Your event time is: ");
      tft.println(event_info);
      tft.setTextColor(ILI9341_WHITE);
      tft.setTextSize(2);
      tft.setCursor(0,0);
      tft.println("Date and Time recorded");
      delay(3000);
      while(!ts.bufferEmpty()){
            ts.getPoint();
          }
      displayClearer("Date and Time recorded");
      old_event = event_info;
      event_time += event_info;
      event_info = "";
      tft.println("Event information");
      tft.print("Event Name: ");
      tft.println(event_name);
      tft.print("Location: ");
      tft.println(event_location);
      tft.print("Time: ");
      tft.println(event_time);
      
      
      //post to database
     if (IOT && (millis() - tLastIotReq >= IOT_UPDATE_INTERVAL)) {
      if (wifi.isConnected() && !wifi.isBusy()) { //Check if we can send request
      Serial.println("Starting POST request");
      Serial.print("Sending request at t=");
      Serial.println(millis());
      
      String domain = "iesc-s2.mit.edu";
      int port = 80;
      String path = "/student_code/" + KERBEROS + "/dev1/sb2.py";
      String getParams = "event_name="+event_name+"&time="+event_time+"&location="+event_location;
      
      wifi.sendRequest(POST, domain, port, path, getParams, true);
      tLastIotReq = millis();
      Serial.println(getParams);

      unsigned long t = millis();
      while(!wifi.hasResponse() && millis()-t<10000); //wait for response
      String resp = "";
      if (wifi.hasResponse()){
        resp=wifi.getResponse();
        Serial.print("Got response at t=");
        Serial.println(millis());
        Serial.println(resp);

        int html1 = resp.indexOf("<html>")+6;
        int html2 = resp.indexOf("</html>");
        String resp2 = resp.substring(html1, html2);
        Serial.println(resp2);

      }
      else{
        Serial.println("No timely response");
        resp = "Nothing";
      }
      }
    }
      
    }
  }
  }  

  
  delay(250);
  while(!ts.bufferEmpty()){
      ts.getPoint();
    }


  //user pushes the display mode button
  if (p.x > 190 && p.x < 230 && p.y > 70 && p.y < 110){
    tft.fillScreen(ILI9341_BLUE); 
    tft.fillRect(268, 0, 55, 25, ILI9341_BLACK);
    tft.drawRect(268, 0, 55, 25, ILI9341_WHITE);
    tft.setCursor(275, 5);
    tft.setTextSize(1);
    tft.println("Add");
    tft.setCursor(275, 15);
    tft.println("Event");
    tft.setCursor(0,0);
    tft.setTextSize(2);
    add_event_mode = false;
    display_mode = true;
  }
    //the user goes back to add event mode
    if (p.x > 290 && p.y > 190 && p.y < 245){
      add_event_mode = true;
      display_mode = false;
      tft.fillScreen(ILI9341_BLUE);
      Serial.println("Did it work?");
      tft.setRotation(0);
      bmpDraw("keyfour.bmp", 0, 0);
      tft.fillRect(0, 0, 28, 90, ILI9341_RED);

      tft.setRotation(1);
      
      tft.fillRect(268, 0, 55, 25, ILI9341_BLUE);
      tft.drawRect(268, 0, 55, 25, ILI9341_BLUE);
      tft.fillRect(103, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(103, 75, 55, 25, ILI9341_WHITE);
      tft.fillRect(158, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(158, 75, 55, 25, ILI9341_WHITE);
      tft.fillRect(213, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(213, 75, 55, 25, ILI9341_WHITE);
      tft.fillRect(268, 75, 55, 25, ILI9341_BLACK);
      tft.drawRect(268, 75, 55, 25, ILI9341_WHITE);
          
      tft.setCursor(10, 222);
      tft.setTextSize(1);
      tft.setTextColor(ILI9341_WHITE);
      tft.println("Record Event");
      tft.setCursor(105, 78);
      tft.println("Display");
      tft.setCursor(105, 88);
      tft.println("Mode");
      tft.setCursor(165, 85);
      tft.println("Name");
      tft.setCursor(218, 85);
      tft.println("Location");
      tft.setCursor(275, 85);
      tft.println("Time");
      tft.setCursor(0,0);
      tft.setTextSize(2);
      tft.println("Enter Name, Location and Time of Event. Touch 'Name' to start.");
    }
  


  if (display_mode && !add_event_mode){
  if (IOT && wifi.hasResponse()){
    resp = wifi.getResponse();
    tLastIotResp = millis();
    Serial.print("working");
  }

    if (IOT && (millis() - tLastIotReq >= IOT_UPDATE_INTERVAL)) {
    if (wifi.isConnected() && !wifi.isBusy()) { //Check if we can send request
      Serial.print("Sending request at t=");
      Serial.println(millis());
      
      String domain = "iesc-s2.mit.edu";
      int port = 80;
      String path = "/student_code/" + KERBEROS + "/dev1/sb2.py";
      
      wifi.sendRequest(GET, domain, port, path, true);
      tLastIotReq = millis();

      unsigned long t = millis();
      while(!wifi.hasResponse() && millis()-t<10000); //wait for response
      String resp = "";
      if (wifi.hasResponse()){
        resp=wifi.getResponse();
        Serial.print("Got response at t=");
        Serial.println(millis());
        Serial.println(resp);
        
        int html1 = resp.indexOf("<html>")+6;
        int html2 = resp.indexOf("</html>");
        String resp2 = resp.substring(html1, html2);
        tft.setCursor(0,20);
        tft.setTextSize(1);
        tft.println(resp2);
        
        

      }
      else{
        Serial.println("No timely response");
        resp = "Nothing";
      }
      }
    }
  }

}


void getletters(int x, int y){
  //print letters to the Serial monitor
  if (x > 155 && x < 190 && y < 23){
    event_info += "1";
    dispCurrentLetters(); 
  }
  else if (x > 155 && x < 190 && y >= 23 && y < 40){
    event_info += "2";
    dispCurrentLetters(); 
  }
  else if (x > 155 && x < 190 && y >= 40 && y < 57){
    event_info += "3";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 57 && y < 77){
    event_info += "4";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 77 && y < 97){
    event_info += "5";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 97 && y < 123){
    event_info += "6";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 123 && y < 145){
    event_info += "7";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 145 && y < 165){
    event_info += "8";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 165 && y < 187){
    event_info += "9";
    dispCurrentLetters();
  }
  else if (x > 155 && x < 190 && y >= 187 && y < 205){
    event_info += "0";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y < 23){
    event_info += "a";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 23 && y < 40){
    event_info += "b";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 40 && y < 57){
    event_info += "c";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 57 && y < 77){
    event_info += "d";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 77 && y < 97){
    event_info += "e";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 97 && y < 123){
    event_info += "f";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 123 && y < 145){
    event_info += "g";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 145 && y < 165){
    event_info += "h";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 165 && y < 187){
    event_info += "i";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 187 && y < 205){
    event_info += "j";
    dispCurrentLetters();
  }
  else if (x > 125 && x < 155 && y >= 205){
    event_info += "k";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y < 23){
    event_info += "l";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 23 && y < 40){
    event_info += "m";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 40 && y < 57){
    event_info += "n";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 57 && y < 77){
    event_info += "o";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 77 && y < 97){
    event_info += "p";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 97 && y < 123){
    event_info += "q";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 123 && y < 145){
    event_info += "r";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 145 && y < 165){
    event_info += "s";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 165 && y < 187){
    event_info += "t";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 187 && y < 205){
    event_info += "u";
    dispCurrentLetters();
  }
  else if (x > 85 && x < 125 && y >= 205){
    event_info += "v";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y < 23){
    event_info += "w";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 23 && y < 40){
    event_info += "x";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 40 && y < 57){
    event_info += "y";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 57 && y < 77){
    event_info += "z";
    dispCurrentLetters();
  }
  else if (x < 50 && y >= 65 && y < 160){
    event_info += " ";
    dispCurrentLetters();
  }
  else if (x < 50 && y >= 160){
    if (event_info != ""){
    event_info = event_info.substring(0, event_info.length()-1);
    }
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 123 && y < 145){
    event_info += "/";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 187 && y < 205){
    event_info += "-";
    dispCurrentLetters();
  }
  else if (x > 50 && x < 85 && y >= 205){
    event_info += ":";
    dispCurrentLetters();
  }
}



void dispCurrentLetters(){
    tft.setTextColor(ILI9341_BLUE);
    tft.setTextSize(2);
    tft.setCursor(0,0);
    tft.println(old_event);
    Serial.println(event_info);
    tft.setTextColor(ILI9341_WHITE);
    tft.setTextSize(2);
    tft.setCursor(0, 0);
    tft.println(event_info);
    old_event = event_info; 
}

void displayClearer(String old_text){
  tft.setTextColor(ILI9341_BLUE);
  tft.setTextSize(2);
  tft.setCursor(0,0);
  tft.println(old_text);
  tft.setTextColor(ILI9341_WHITE);
  tft.setTextSize(2);
  tft.setCursor(0,0);
}
  

// This function opens a Windows Bitmap (BMP) file and
// displays it at the given coordinates.  It's sped up
// by reading many pixels worth of data at a time
// (rather than pixel by pixel).  Increasing the buffer
// size takes more of the Arduino's precious RAM but
// makes loading a little faster.  20 pixels seems a
// good balance.

#define BUFFPIXEL 20

void bmpDraw(char *filename, uint8_t x, uint16_t y){

  File     bmpFile;
  int      bmpWidth, bmpHeight;   // W+H in pixels
  uint8_t  bmpDepth;              // Bit depth (currently must be 24)
  uint32_t bmpImageoffset;        // Start of image data in file
  uint32_t rowSize;               // Not always = bmpWidth; may have padding
  uint8_t  sdbuffer[3*BUFFPIXEL]; // pixel buffer (R+G+B per pixel)
  uint8_t  buffidx = sizeof(sdbuffer); // Current position in sdbuffer
  boolean  goodBmp = false;       // Set to true on valid header parse
  boolean  flip    = true;        // BMP is stored bottom-to-top
  int      w, h, row, col;
  uint8_t  r, g, b;
  uint32_t pos = 0, startTime = millis();

  if((x >= tft.width()) || (y >= tft.height())) return;

  Serial.println();
  Serial.print(F("Loading image '"));
  Serial.print(filename);
  Serial.println('\'');

  // Open requested file on SD card
  if ((bmpFile = SD.open(filename)) == NULL) {
    Serial.print(F("File not found"));
    return;
  }

    // Parse BMP header
  if(read16(bmpFile) == 0x4D42) { // BMP signature
    Serial.print(F("File size: ")); Serial.println(read32(bmpFile));
    (void)read32(bmpFile); // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile); // Start of image data
    Serial.print(F("Image Offset: ")); Serial.println(bmpImageoffset, DEC);
    // Read DIB header
    Serial.print(F("Header size: ")); Serial.println(read32(bmpFile));
    bmpWidth  = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    if(read16(bmpFile) == 1) { // # planes -- must be '1'
      bmpDepth = read16(bmpFile); // bits per pixel
      Serial.print(F("Bit Depth: ")); Serial.println(bmpDepth);
      if((bmpDepth == 24) && (read32(bmpFile) == 0)) { // 0 = uncompressed

        goodBmp = true; // Supported BMP format -- proceed!
        Serial.print(F("Image size: "));
        Serial.print(bmpWidth);
        Serial.print('x');
        Serial.println(bmpHeight);

        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * 3 + 3) & ~3;

        // If bmpHeight is negative, image is in top-down order.
        // This is not canon but has been observed in the wild.
        if(bmpHeight < 0) {
          bmpHeight = -bmpHeight;
          flip      = false;
        }

        // Crop area to be loaded
        w = bmpWidth;
        h = bmpHeight;
        if((x+w-1) >= tft.width())  w = tft.width()  - x;
        if((y+h-1) >= tft.height()) h = tft.height() - y;

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x+w-1, y+h-1);

        for (row=0; row<h; row++) { // For each scanline...

          // Seek to start of scan line.  It might seem labor-
          // intensive to be doing this on every line, but this
          // method covers a lot of gritty details like cropping
          // and scanline padding.  Also, the seek only takes
          // place if the file position actually needs to change
          // (avoids a lot of cluster math in SD library).
          if(flip) // Bitmap is stored bottom-to-top order (normal BMP)
            pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
          else     // Bitmap is stored top-to-bottom
            pos = bmpImageoffset + row * rowSize;
          if(bmpFile.position() != pos) { // Need seek?
            bmpFile.seek(pos);
            buffidx = sizeof(sdbuffer); // Force buffer reload
          }

          for (col=0; col<w; col++) { // For each pixel...
            // Time to read more pixel data?
            if (buffidx >= sizeof(sdbuffer)) { // Indeed
              bmpFile.read(sdbuffer, sizeof(sdbuffer));
              buffidx = 0; // Set index to beginning
            }

            // Convert pixel from BMP to TFT format, push to display
            b = sdbuffer[buffidx++];
            g = sdbuffer[buffidx++];
            r = sdbuffer[buffidx++];
            tft.pushColor(tft.color565(r,g,b));
          } // end pixel
        } // end scanline
        Serial.print(F("Loaded in "));
        Serial.print(millis() - startTime);
        Serial.println(" ms");
      } // end goodBmp
    }
  }

  bmpFile.close();
  if(!goodBmp) Serial.println(F("BMP format not recognized."));
}

// These read 16- and 32-bit types from the SD card file.
// BMP data is stored little-endian, Arduino is little-endian too.
// May need to reverse subscript order if porting elsewhere.

uint16_t read16(File &f) {
  uint16_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read(); // MSB
  return result;
}

uint32_t read32(File &f) {
  uint32_t result;
  ((uint8_t *)&result)[0] = f.read(); // LSB
  ((uint8_t *)&result)[1] = f.read();
  ((uint8_t *)&result)[2] = f.read();
  ((uint8_t *)&result)[3] = f.read(); // MSB
  return result;
}
